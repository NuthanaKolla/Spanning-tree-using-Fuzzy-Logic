import sys
class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                    for row in range(vertices)]
    def printMST(self, parent):
        print ("Edge \tWeight")
        sum=0
        for i in range(1, self.V):
          sum=sum+self.graph[i][parent[i]]
          print (parent[i], "-", i, "\t", self.graph[i][parent[i]])
        print("Total minimum cost is ",sum)
    def minKey(self, key, mstSet):
        min = sys.maxsize
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v
        return min_index

    def primMST(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V
        key[0] = 0
        mstSet = [False] * self.V
        parent[0] = -1 
        for cout in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):
                if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
                        key[v] = self.graph[u][v]
                        parent[v] = u
        self.printMST(parent)

n=int(input("Enter number of vertices "))
e=int(input("Enter number of edges "))
d = Graph(n)
for i in range(e):
    u=int(input("Enter source "))
    v=int(input("Enter dest "))
    q=[int(item) for item in input("Enter weight ").split()]
    w=(1/6)*(q[0]+(2*q[1])+(2*q[2])+q[3])
    d.graph[u][v]=w
    d.graph[v][u]=w

d.primMST();
